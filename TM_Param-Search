import subprocess
import numpy as np

def run_experiment_with_params(ensembles, epochs, clauses, T, s, patch_dim, max_included_literals, resolution, binarized, batch_size, block_size, quant_multiple, quant_matrix, dct_step, wavelet_type):

    # Build the command
    command = [
        'python3', 'DCT_experiment.py', 
        '--ensembles', str(ensembles),
        '--epochs', str(epochs),
        '--clauses', str(clauses),
        '--T', str(T),
        '--s', str(s),
        '--patch_dim', str(patch_dim[0]), str(patch_dim[1]),
        '--max_included_literals', str(max_included_literals),
        '--resolution', str(resolution),
        '--binarized', str(binarized),
        '--batch_size', str(batch_size),
        '--block_size', str(block_size),
        '--quant_multiple', str(quant_multiple),
        '--quant_matrix', quant_matrix,
        '--wavelet_type', wavelet_type,
        '--dct_step', str(dct_step),
        '--output_dir', f"results_{resolution}_{binarized}_{quant_multiple}"
    ]
    
    # Use subprocess.Popen to run the command and print the output in real-time
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    # Print stdout and stderr in real time
    for stdout_line in process.stdout:
        print(stdout_line, end='')  # Print the output line by line
    
    # Wait for the process to finish and get the return code
    process.stdout.close()
    returncode = process.wait()
    
    # Capture any remaining stderr (if needed)
    stderr_output = process.stderr.read()
    if stderr_output:
        print(stderr_output)

    return returncode


def main():
    # Define the parameters to test
    ensembles = 1
    epochs = 50
    clauses = 16000
    T = 10000
    s = 4.0
    patch_dims = [(10,10), (5,5)]
    max_included_literals = 32
    resolution = 20
    binarized = True
    batch_size = 10000
    block_size = 8
    quant_multiple = 1.0
    quant_matrix = "img_quant_matrix"
    wavelet_type = ["haar","morlet"]
    dct_steps = [5, 3]

    # Iterate over the parameter combinations
    for patch_dim in patch_dims:
        for dct_step in dct_steps:
            print(f"Running experiment with resolution={resolution}, binarized={binarized}, quant_matrix={quant_matrix}, block_size={block_size}, dct_steps={dct_step}, patch_dims={patch_dim}")
            run_experiment_with_params(
                ensembles, epochs, clauses, T, s, patch_dim, max_included_literals, 
                resolution, binarized, batch_size, block_size, quant_multiple, quant_matrix, dct_step, wavelet_type
            )


if __name__ == "__main__":
    main()
