import subprocess
import optuna
import numpy as np
import re

def run_experiment_with_params(ensembles, epochs, clauses, T, s, patch_dim, max_included_literals, resolution, binarized, batch_size, block_size, quant_multiple, quant_matrix, dct_step, wavelet_type):

    command = [
        'python3', 'TM-Experiment.py', 
        '--ensembles', str(ensembles),
        '--epochs', str(epochs),
        '--clauses', str(clauses),
        '--T', str(T),
        '--s', str(s),
        '--patch_dim', str(patch_dim[0]), str(patch_dim[1]),
        '--max_included_literals', str(max_included_literals),
        '--resolution', str(resolution),
        '--binarized', str(binarized),
        '--batch_size', str(batch_size),
        '--block_size', str(block_size),
        '--quant_multiple', str(quant_multiple),
        '--quant_matrix', quant_matrix,
        '--wavelet_type', wavelet_type,
        '--dct_step', str(dct_step),
        '--output_dir', f"results_{resolution}_{binarized}_{quant_multiple}"
    ]
    print("Running command:", " ".join(command))
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    best_accuracy = 0
    accuracy_pattern = re.compile(r"Test Accuracy (\d+\.\d+)%")
    for stdout_line in process.stdout:
        print(stdout_line, end='')

        # Use regex to extract the accuracy value
        match = accuracy_pattern.search(stdout_line)
        if match:
            best_accuracy = float(match.group(1))

    
    # Capture any remaining stderr (if needed)
    stderr_output = process.stderr.read()
    if stderr_output:
        print("STDERR Output:", stderr_output)
    process.stdout.close()
    returncode = process.wait()
    
    if returncode != 0:
        raise RuntimeError("Experiment failed to run")

    return best_accuracy
def objective(trial):
    # Define the parameter search space
    wavelet_type = trial.suggest_categorical("wavelet_type", ["haar", "morlet", "db1"])
    dct_step = trial.suggest_int("dct_step", 5, 10)
    block_size = trial.suggest_categorical("block_size", [4, 8, 16])
    quant_multiple = trial.suggest_float("quant_multiple", 0.5, 2.0, step=0.5)
    patch_dim_size = trial.suggest_int("patch_dim_size", 1, 16, step=2)

    # Set patch_dim to be square
    patch_dim = (patch_dim_size, patch_dim_size)

    # Fixed parameters (your proposed good starting values)
    ensembles = 1
    epochs = 50
    clauses = 2000
    resolution = 30
    T = 5000
    s = 4.0
    max_included_literals = 32
    binarized = True
    batch_size = 500
    quant_matrix = "img_quant_matrix"

    # Run the experiment and get the accuracy
    accuracy = run_experiment_with_params(
        ensembles, epochs, clauses, T, s, patch_dim, max_included_literals,
        resolution, binarized, batch_size, block_size, quant_multiple, quant_matrix,
        dct_step, wavelet_type
    )

    return accuracy


def main():
    # Create an Optuna study to maximize accuracy
    study = optuna.create_study(direction="maximize")

    # Run the optimization for a specified number of trials
    study.optimize(objective, n_trials=50)

    # Print the best found parameters
    print("Best Parameters:")
    print(study.best_params)
    print(f"Best Accuracy: {study.best_value:.2f}%")

    # Optionally, save the study results
    study.trials_dataframe().to_csv("optuna_study_results.csv")

if __name__ == "__main__":
    main()
